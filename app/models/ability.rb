# frozen_string_literal: true
# rails g cancan:ability
# This file is generated by above terminal command

# this gem 'cancancan'assumes method current_user in application controller and when it gets it , it automatically inintalized gem, with the current_user passed to it

class Ability
  include CanCan::Ability

  def initialize(user)
    # Define abilities for the passed in user here. For example:
    #
    user ||= User.new # guest user (not logged in)

    if user.is_admin?
      can :manage,:all # manage means every thing (not just CRUD)
    end
    #   if user.admin?
    #     can :manage, :all
    #   else
    #     can :read, :all
    #   end
    #
    # The first argument to `can` is the action you are giving the user
    # permission to do.
    # If you pass :manage it will apply to every action. Other common actions
    # here are :read, :create, :update and :destroy.
    #
    # The second argument is the resource the user can perform the action on.
    # If you pass :all it will apply to every resource. Otherwise pass a Ruby
    # class of the resource.
    #
    # The third argument is an optional hash of conditions to further filter the
    # objects.
    # For example, here the user can only update published articles.
    #
    #   can :update, Article, :published => true
    #
    # See the wiki for details:
    # https://github.com/CanCanCommunity/cancancan/wiki/Defining-Abilities

# We will be defining our rules for different roles here:
# We will be using 'can' method to define rules
# First argument it takes is an action - but in form of symbol
# Actions could be:
# :create(:new)
# :read(:index and :show)
# :update(:edit)
# :destroy

alias_action(:create, :read,:update, :delete, to: :crud)
# alias_action(:create, :update, :read, to: :crud_without_delete)

#  second argument for the method 'can' is a name of resource(and in our case it is Question and Answer) or :all(and this will be applied to all the resource in a application)
# third is the block that we pass to the 'can' 

# Allow owner of the question to perform CRUD on it question
can(:crud, Question) do |question|
  user==question.user
  # Here user is comming from our method_helper current_user in application controller
end
# In following we are allowing the user to perform CRUD on Answer if the user is its owner
can(:crud, Answer)do |answer|
  user==answer.user
end

can(:crud, JobPost) do |job_post|
  user == job_post.user
end

#  it is important to set  the permission at two level
#  1. Controller
# 2.View level


  end
end
